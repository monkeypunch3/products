<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:handlers="com.flexcapacitor.handlers.*" 
		 xmlns:file="com.flexcapacitor.effects.file.*"
		 
		 implements="form.controls.IFormControl"
		 
		 width="100%" 
		 creationComplete="creationCompleteHandler(event)"
		 >
	
	<!---
	
	A label, text input and button that is used to select a file or a folder
	
	A change event is dispatched when a new file or folder is selected
	-->
	
	<fx:Metadata>
		[Event(name="change", type="flash.events.Event")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import spark.events.TextOperationEvent;
			
			protected function browseforfile1_selectHandler(event:Event):void {
				if (!browseForFile.useFileReferences) {
					textInput.text = File(browseForFile.file).nativePath;
				}
				else {
					textInput.text = FileReference(browseForFile.fileReference).name;
				}
				
				dispatchEvent(new Event(Event.CHANGE));
			}
			
			public function getValue():String {
				var out:String = textInput.text;
				
				if (quotes=="single") {
					out = "'" + out + "'";
				}
				else if (quotes=="double") {
					out = "\"" + out + "\"";
				}
				else if (quotes=="beginSingle") {
					out = "'" + out;
				}
				else if (quotes=="beginDouble" || quotes=="begin") {
					out = "\"" + out;
				}
				else if (quotes=="endSingle") {
					out = out + "'";
				}
				else if (quotes=="endDouble" || quotes=="end") {
					out = out + "\"";
				}
				else if (quotes=="none") {
					//out = out;
				}
				
				return out;
			}
			
			private var _text:String = "";
			
			[Bindable]
			public function get text():String {
				return _text;
			}
			
			public function set text(value:String):void {
				_text = value;
				
				if (textInput && textInput.text!=value) {
					textInput.text = value;
				}
				
			}
			
			protected function textInput_changeHandler(event:TextOperationEvent):void {
				text = getValue();
				dispatchEvent(new Event(Event.CHANGE));
			}
			
			protected function browseForFile_errorHandler(event:Event):void {
				
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				if (_text) {
					textInput.text = _text;
				}
			}
			
		]]>
	</fx:Script>
	
	
	<fx:Declarations>
		<handlers:EventHandler target="{selectButton}"
							   eventName="click">
			<file:BrowseForFile id="browseForFile" 
								target="{this}" 
								targetAncestor="{this}"
								allowMultipleSelection="{allowMultipleSelection}"
								useFileReferences="{useFileReferences}"
								browseForFolder="{selectFolder}"
								select="browseforfile1_selectHandler(event)"
								error="browseForFile_errorHandler(event)">
			</file:BrowseForFile>
		</handlers:EventHandler>
		
		<fx:int id="labelWidth">150</fx:int>
		<fx:String id="title"/>
		<fx:String id="quotes"/>
		<fx:String id="prompt"/>
		<fx:String id="defaultValue"/>
		<fx:Object id="data"/>
		<fx:Boolean id="selectFolder">true</fx:Boolean>
		<fx:Boolean id="showLabel">true</fx:Boolean>
		<fx:Boolean id="showButton">true</fx:Boolean>
		<fx:Boolean id="allowMultipleSelection">false</fx:Boolean>
		<fx:Boolean id="useFileReferences">false</fx:Boolean>
	</fx:Declarations>
	
	<s:layout>
		<s:HorizontalLayout verticalAlign="middle"/>
	</s:layout>
	
	<s:Label id="labelDisplay" 
			 text="{title}" 
			 minWidth="{labelWidth}"
			 includeInLayout="{showLabel}"
			 visible="{showLabel}"
			 />
	
	<s:TextInput id="textInput" 
				 width="100%"
				 height="100%"
				 text="{defaultValue}"
				 prompt="{prompt}"
				 change="textInput_changeHandler(event)"
				 />
	
	<s:Button id="selectButton" 
			  label="Select" 
			  height="100%" 
			  includeInLayout="{showButton}"
			  visible="{showButton}"/>
	
</s:Group>

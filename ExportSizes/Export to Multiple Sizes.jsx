///////////////////////////////////////////////////////////////////////////////// EXPORT TO MULTIPLE SIZES///////////////////////////////////////////////////////////////////////////////// Apache 2.0 License // Version 1.2.4// http://www.velara3.com// For feedback and bug reports email support@velara3.com// Add your own presets tutorial - http://www.velara3.com/wp/2015/01/22/export-to-multiple-sizes-for-photoshop/ // There is an area below where you can add your own custom presets (~line 26) // Below that area is instructions and code examples that you can copy and paste// For more info on export options see Photoshop CS5 JavaScript Ref.pdf// set to 1 to get debug errors in the Adobe ExtendScript Toolkit (must be installed)$.level = 0;// custom platformscustomPlatforms = [];///////////////////////////////////////////////////////////////////////////////// ADD CUSTOM PREFERENCES HERE///////////////////////////////////////////////////////////////////////////////// DO NOT MODIFY ABOVE THIS LINE// DO NOT MODIFY BELOW THIS LINE///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// INSTRUCTIONS///////////////////////////////////////////////////////////////////////////////// To add your own presets, copy the code of one of the examples below// and paste it in the space above. // // Next add a line for each of the sizes you want // Name your export settings in the customPlatforms object// Save this file and try again. You will see your option in the pop up dialog// // Export options: // -name is used to create the file name. what you use will be appended to the original file name. if you use "Bird_100" for name then the final image will be filename_Bird_100.png// -size is the destination size. if you enter 100 for size the image will be resized to 100 by 100. you can use percentages. enclose them in quotes// -directory is the destination direction (optional). if you enter "assets" then the file will be saved to "assets/yourimage_size.png"// -width and height are also options you can set when not resizing to a square. these override the size setting.// -formats you can choose to export png, jpeg and so on (a list is below)// -resampleMethod methods of resample, such as ResampleMethod.BICUBICSMOOTHER (a list is below)// -quality a value from 1 to 100 used when exporting compressed images// -includeProfile a true or false value to include the profile. default is false// -preserveAspectRatio if true preserves the aspect ratio. if false then may stretch to fit. default is true // Examples (6 examples): /*// Example 1:// custom name MY_FLAPPY_BIRD_GAME_EXPORT_SIZES = [        {"name": "Bird_1024", "size":1024},        {"name": "Bird_512", "size":512},        {"name": "Bird_128", "size":128},        ];customPlatforms.push({"id": "myFlappyBirdGameScript", "name": "Flappy Bird Game Sizes", "options": MY_FLAPPY_BIRD_GAME_EXPORT_SIZES});// Example 2:// multiple square sizesMY_FLAPPY_BIRD_GAME_EXPORT_SIZES2 = [        {"name": "100", "size":100},        {"name": "200", "size":200},        {"name": "300", "size":300},        {"name": "400", "size":400},        ];customPlatforms.push({"id": "myFlappyBirdGameScript2", "name": "Flappy Bird Game Sizes 2", "options": MY_FLAPPY_BIRD_GAME_EXPORT_SIZES2});// Example 3:// explicit width and heightMY_EXPORT_SIZES = [        {"name": "Large", "width":400, "height":250},        {"name": "Medium", "width":198, "height":124},        {"name": "Small", "width":100, "height":60},        ];customPlatforms.push({"id": "myExportScript", "name": "My Export Sizes", "options": MY_EXPORT_SIZES});// Example 4:// formats, quality, resample method, include profileEXAMPLE_VARIOUS_EXPORT_OPTIONS = [        {"name": "Bird_1024", "size":1024, "format":SaveDocumentType.JPEG},        {"name": "Bird_1024_q10", "size":1024, "format":SaveDocumentType.JPEG, "quality":10},        {"name": "Bird_1024_q100", "size":1024, "format":SaveDocumentType.JPEG, "quality":100},        {"name": "Bird_1024_png_bcs", "size":1024, "format":SaveDocumentType.PNG, "resampleMethod":ResampleMethod.BICUBICSMOOTHER},        {"name": "Bird_1024_png_nn", "size":1024, "format":SaveDocumentType.PNG, "resampleMethod":ResampleMethod.NEARESTNEIGHBOR},        {"name": "Bird_512_png", "size":512, "format":SaveDocumentType.PNG, "includeProfile":true},        {"name": "Bird_512_gif", "size":768, "format":SaveDocumentType.COMPUSERVEGIF, "includeProfile":true},        {"name": "Bird_128", "size":128},        ];customPlatforms.push({"id": "exampleOfVariousOptions", "name": "Example of Various Options", "options": EXAMPLE_VARIOUS_EXPORT_OPTIONS});// Example 5 : // percentagesMY_FLAPPY_BIRD_GAME_EXPORT_SIZES = [        {"name": "Bird_10", "size":"10%"},        {"name": "Bird_50", "size":"50%"},        {"name": "Bird_100", "size":"100%"},        {"name": "Bird_200", "size":"200%"},        ];customPlatforms.push({"id": "myFlappyBirdGameScript", "name": "Flappy Bird Game Sizes", "options": MY_FLAPPY_BIRD_GAME_EXPORT_SIZES});// Example 6 : // setting width but not height and setting height but not widthMY_FLAPPY_BIRD_SETTING_ONE_DIMENSION = [        {"name": "Bird_width_250", "width":250},        {"name": "Bird_height_350", "height":350},        ];customPlatforms.push({"id": "myFlappyBirdOneDimension", "name": "Flappy Bird Setting One Dimension", "options": MY_FLAPPY_BIRD_SETTING_ONE_DIMENSION});*////////////////////////////////////////////////////////////////////////////////// SOME REFERENCES////////////////////////////////////////////////////////////////////////////////*Resample Methods:BICUBICBICUBICSHARPERBICUBICSMOOTHERBILINEARNEARESTNEIGHBORNONE (not supported)*/			/* SaveDocumentType valid values are:For the "format" property, only COMPUSERVEGIF, JPEG, PNG-8, PNG-24, and BMP are supported.Note: PNG-8 and PNG-24 may both be specified as PNGBut difference may be saveForWeb.PNG8 = true or false. if false then save as 24 bitsALIASPIXBMPCOMPUSERVEGIFELECTRICIMAGEJPEGPCXPHOTOSHOPPHOTOSHOPDCS_1PHOTOSHOPDCS_2PHOTOSHOPEPSPHOTOSHOPPDFPICTFileFORMATPICTRESOURCEFORMATPIXARPNGPORTABLEBITMAPRAWSCITEXCTSGIRGBSOFTIMAGETARGATIFFWAVEFRONTRLAWIRELESSBITMAP*//* ANDROID SIZES GUIDELINEShttps://developer.android.com/guide/practices/ui_guidelines/icon_design.htmlhttps://developer.android.com/guide/practices/screens_support.html*////////////////////////////////////////////////////////////////////////////////// EXPORT TO MULTIPLE SIZES///////////////////////////////////////////////////////////////////////////////ExportToMultipleSizes = {	AIR: "air",	ANDROID: "android",	IOS: "ios",    airRadio:null,    androidRadio:null,    iosRadio:null,    dialog:null,    initialIndex:0,    radioButtons:[],    platforms: [],        AIR_SIZES: [        {"name": "1024", "size":1024, "version": 4},        {"name": "732x412", width:732, height:412, "version": 15},        {"name": "512", "size":512, "version": 4},        {"name": "192", "size":192, "version": 15},        {"name": "180", "size":180, "version": 15},        {"name": "158", "size":158, "version": 15},        {"name": "144", "size":144, "version": 4},        {"name": "128", "size":128, "version": 4},        {"name": "120", "size":120, "version": 15},        {"name": "114", "size":114, "version": 4},        {"name": "100", "size":100, "version": 4},        {"name": "96", "size":96, "version": 15},        {"name": "87", "size":87, "version": 15},        {"name": "80", "size":80, "version": 15},        {"name": "76", "size":76, "version": 15},        {"name": "75", "size":75, "version": 15},        {"name": "72", "size":72, "version": 4},        {"name": "66", "size":66, "version": 15},        {"name": "60", "size":60, "version": 15},        {"name": "58", "size":58, "version": 4},        {"name": "57", "size":57, "version": 4},        {"name": "50", "size":50, "version": 4},        {"name": "48", "size":48, "version": 4},        {"name": "44", "size":44, "version": 15},        {"name": "40", "size":40, "version": 15},        {"name": "36", "size":36, "version": 4},        {"name": "32", "size":32, "version": 4},        {"name": "29", "size":29, "version": 4},        {"name": "16", "size":16, "version": 4}    ],        ANDROID_ICONS: [        {"directory": "store", "name": "Icon", "size":512},        {"directory": "drawable-xxxhdpi", "name": "Icon", "size":192},        {"directory": "drawable-xxhdpi", "name": "Icon", "size":180},        {"directory": "drawable-xhdpi", "name": "Icon", "size":96},        {"directory": "drawable-hdpi", "name": "Icon", "size":72},        {"directory": "drawable-mdpi", "name": "Icon", "size":48},        {"directory": "drawable-ldpi", "name": "Icon", "size":36},    ],        ANDROID_IMAGES: [        {"directory": "drawable-xxxhdpi", "name": "", "size":"100%"},        {"directory": "drawable-xxhdpi", "name": "", "size":"75%"},        {"directory": "drawable-xhdpi", "name": "", "size":"62.5%"},        {"directory": "drawable-hdpi", "name": "", "size":"50%"},        {"directory": "drawable-mdpi", "name": "", "size":"25%"},        {"directory": "drawable-ldpi", "name": "", "size":"18.75%"},    ],    IOS_SIZES: [        {"name": "iTunesArtwork@2x", "size":1024},        {"name": "iTunesArtwork", "size":512},        {"name": "Icon", "size":57},        {"name": "Icon@2x", "size":114},        {"name": "Icon-72", "size":72},        {"name": "Icon-72@2x", "size":144},        {"name": "Icon-76", "size":76},        {"name": "Icon-76@2x", "size":152},        {"name": "Icon-Small", "size":29},        {"name": "Icon-Small@2x", "size":58},        {"name": "Icon-Small-40", "size":40},        {"name": "Icon-Small-40@2x", "size":80},        {"name": "Icon-Small-50", "size":50},        {"name": "Icon-Small-50@2x", "size":100}    ],	createResizedImages: function(name) {			var minSize = 16;		var iTunesArtwork;		var usingActiveDoc;		var initialPreferences;		var minHeight = minSize;		var minWidth = minSize		var currentDocument;		var isIOS = false;		var isAndroid = false;		var isAIR = false;		var documentName;		var documentInfo;		var destinationFolder;		var destinationFileName;		var destinationFile;		var androidDirectory;		var outputDirectory;		var appIconXML = "";		var appIconXMLUpdated = "";		var size;		var items = [];		var item;		var format;		var resampleMethod;		var defaultExportFormat;		var defaultResampleMethod;		var defaultIncludeProfile;		var defaultQuality;		var defaultPreserveAspectRatio;		var startState;		var initialPreferences;		var saveForWeb;		var width;		var height;		var documentWidth;		var documentHeight;		var tempFile;		var iconXML;		var numberOfItems;		var errors = "";		var imageAspectRatio;		var targetAspectRatio;				try {					// Error: Cannot open the file because the open options are incorrect - means wrong file type (selected PSD instead of PNG)						if (app && app.documents.length==0) {				tempFile = File.openDialog( "Select the image file you would like to resize.", "*.png, *.jpg, *.jpeg, *.gif", false);				if (tempFile) {					currentDocument = open(tempFile);				}                 else {                    return;                 }			}			else {				currentDocument = app.activeDocument;				usingActiveDoc = true;			}							if (currentDocument == null) {                return;			}					destinationFolder = Folder.selectDialog( "Choose an destination folder");					if (destinationFolder == null) {   				return;			}						startState = currentDocument.activeHistoryState;			initialPrefs = app.preferences.rulerUnits;			app.preferences.rulerUnits = Units.PIXELS;			documentWidth = currentDocument.width;			documentHeight = currentDocument.height;			imageAspectRatio = documentWidth/documentHeight;						// DEFAULT EXPORT OPTIONS			defaultExportFormat = SaveDocumentType.PNG;			defaultResampleMethod = ResampleMethod.BICUBICSHARPER;			defaultIncludeProfile = false;			defaultQuality = 60;			defaultPreserveAspectRatio = true;						// could add more export options - see Photoshop CS5 JavaScript Ref.pdf			saveForWeb = new ExportOptionsSaveForWeb();			saveForWeb.format = defaultExportFormat;			saveForWeb.PNG8 = false;			saveForWeb.transparency = true;						//saveForWeb.interlaced = 0;			//saveForWeb.optimized = true;						documentInfo = currentDocument.info;			currentDocument.info = null;						platform = this.getPlatformByName(name);						//$.writeln("Exporting to: " + platform.name);									if (platform) {				items = platform.options;			}			else {				ExportToMultipleSizes.alertMessage("Error", "Could not find platform for " + name);				this.hideWindow();				return;			}									documentName = currentDocument.name.replace(/(.+?)(\.[^.]*$|$)/, "$1");						//$.writeln("Exporting items: " + items.length);            numberOfItems = items.length;                                    // LOOP THROUGH SIZES TO EXPORT TO			for (var i = 0; i < numberOfItems; i++) {				item = items[i];				size = item.size;								if (typeof size=="string" && size.indexOf("%")!=-1) {					width = documentWidth * (size.substr(0, size.indexOf("%"))/100);					height = documentHeight * (size.substr(0, size.indexOf("%"))/100);				}				else {					if (size!=null) {						width = item["width"]!=null ? item.width : size;						height = item["height"]!=null ? item.height : size;					}					else {						if (item["width"]!=null && item["height"]!=null) {							width = item.width;							height = item.height;						}						else if (item["width"]!=null) {							width = item.width;							height = (width/documentWidth) * documentHeight;						}						else if (item["height"]!=null) {							height = item.height;							width = (height/documentHeight) * documentWidth;						}						else {							width = documentWidth;							height = documentHeight;						}					}				}								if (typeof width=="string") {					width = parseInt(width);				}				if (typeof height=="string") {					height = parseInt(height);				}								format = item["format"]!=null ? item.format : defaultExportFormat;				resampleMethod = item["resampleMethod"]!=null ? item.resampleMethod : defaultResampleMethod;				includeProfile = item["includeProfile"]!=null ? item.includeProfile : defaultIncludeProfile;				quality = item["quality"]!=null ? item.quality : defaultQuality;				preserveAspectRatio = item["preserveAspectRatio"]!=null ? item.preserveAspectRatio : defaultPreserveAspectRatio;								saveForWeb.format = format;				saveForWeb.includeProfile = includeProfile;				saveForWeb.quality = quality;								targetAspectRatio = width / height;								// EXTENSION				if (format==SaveDocumentType.PNG) {					extension = ".png";				}				else if (format==SaveDocumentType.JPEG) {					extension = ".jpg";				}				else if (format==SaveDocumentType.COMPUSERVEGIF) {					extension = ".gif";				}				else if (format==SaveDocumentType.BMP) {					extension = ".bmp";				}												// RESIZE				if (resampleMethod==ResampleMethod.NONE) {									// Getting error when saving with null					// disabling resample of NONE										errors = "ResampleMethod of NONE is not supported. Please choose another type";										/*					if (width==null) {						currentDocument.resizeImage(null, height, null, resampleMethod);					}					else if (height==null) {						currentDocument.resizeImage(width, null, null, resampleMethod);					}					else {						ExportToMultipleSizes.alertMessage("If you set resample to NONE you can only specify width or height not both. Set either width or height to null");					}					*/				}				else if (width != height || documentWidth!=documentHeight) {									if (preserveAspectRatio) {						adjustedWidth = width;						adjustedHeight = height;											    if (imageAspectRatio > targetAspectRatio) {					        adjustedHeight = width / imageAspectRatio;					    }					    else {					        adjustedWidth = height * imageAspectRatio;					    }					    					    currentDocument.resizeImage(adjustedWidth, adjustedHeight, null, resampleMethod);					    						currentDocument.resizeCanvas(width, height, AnchorPosition.MIDDLECENTER);					}					else {						currentDocument.resizeImage(width, height, null, resampleMethod);					}				}				else {					currentDocument.resizeImage(width, height, null, resampleMethod);				}												// EXPORT TO PLATFORM				if (platform.id == this.IOS) {					if (item.name == "iTunesArtwork@2x" || item.name == "iTunesArtwork") {						destinationFileName = item.name;					}					else {						destinationFileName = item.name + extension;					}										currentDocument.exportDocument(new File(destinationFolder + "/" + destinationFileName), ExportType.SAVEFORWEB, saveForWeb);				}				else if (platform.id == this.AIR) {					if (item.name!="") {						destinationFileName = documentName + "_" + item.name + extension;					}					else {						destinationFileName = documentName + "_" + item.name + extension;					}					itemXML = "\t<image" + width + "x" + height + ">" + destinationFolder + "/" + destinationFileName + "</image" + width + "x" + height + ">\n";										if (item.version==4) {						appIconXML += itemXML;					}										appIconXMLUpdated += itemXML;										currentDocument.exportDocument(new File(destinationFolder + "/" + destinationFileName), ExportType.SAVEFORWEB, saveForWeb);				}				else if (platform.id == this.ANDROID) {					// Make output folders					androidDirectory = new Folder(destinationFolder+"/"+item.directory);										if (!androidDirectory.exists) {						androidDirectory.create();						//$.writeln(androidDirectory + " doesn't exist. creating");					}										if (item.name!="") {						destinationFileName = item.name + extension;					}					else {						destinationFileName = documentName + extension;					}										currentDocument.exportDocument(new File(androidDirectory + "/" + destinationFileName), ExportType.SAVEFORWEB, saveForWeb);									}				else {					// GENERIC										// make directory					if (item.directory) {						//$.writeln("In make directory: " + item.directory);						// Make output folders						outputDirectory = new Folder(destinationFolder+"/"+item.directory);												if (!outputDirectory.exists) {							outputDirectory.create();							//$.writeln(outputDirectory + " doesn't exist. creating");						}					}					else {						//$.writeln("Not In make directory: ");						outputDirectory = new Folder(destinationFolder);					}										if (item.name!="") {						destinationFileName = documentName + "_" + item.name + extension;					}					else {						destinationFileName = documentName + extension;					}										currentDocument.exportDocument(new File(outputDirectory + "/" + destinationFileName), ExportType.SAVEFORWEB, saveForWeb);									}            				currentDocument.activeHistoryState = startState;			}						if (errors!="") {				ExportToMultipleSizes.alertMessage("Error with one or more of your images", errors, false); 			}						// SHOW RESULTS			if (platform.id == this.IOS) {				ExportToMultipleSizes.alertMessage("Export Finished", "iOS icons created!", false);			}			else if (platform.id == this.AIR) {				appIconXML = "<icon>\n" + appIconXML + "</icon>";				appIconXMLUpdated = "<icon>\n" + appIconXMLUpdated + "</icon>";				var output =  "" + appIconXMLUpdated + "\n\n<!-- AIR 4.0 -->\n" + appIconXML;				ExportToMultipleSizes.alertExportWindow("Export Finished", output, "The AIR icons have been created! Press CTRL + C to copy the app descriptor icon XML to the clipboard. \n");			}			else if (platform.id == this.ANDROID) {				ExportToMultipleSizes.alertMessage("Export Finished", "Android icons have been created!", false);			}			else {				ExportToMultipleSizes.alertMessage("Export Finished", "Your images have been created!", false);			}				}		catch (exception) {			if (exception != null && exception != "") {				//alert("Error", exception);				ExportToMultipleSizes.alertMessage("Error", exception + ". Contact support@velara3.com");				//ExportToMultipleSizes.hideWindow();			}						if (currentDocument && startState) {				currentDocument.activeHistoryState = startState;			}		}		finally {			if (currentDocument != null) {				if (usingActiveDoc==false) {					currentDocument.close(SaveOptions.DONOTSAVECHANGES);				}				else if (documentInfo) {					currentDocument.info = documentInfo;				}								if (startState) {					currentDocument.activeHistoryState = startState;				}			}						if (initialPreferences) {				app.preferences.rulerUnits = initialPreferences;			}		}	},		run: function() {			gSaveDialogMode = app.displayDialogs;		app.displayDialogs = DialogModes.NO;		gInAlert = false;			var dialog = ExportToMultipleSizes.dialog = new Window("dialog", "Export to multiple sizes");		dialog.orientation = "column";		var panel = dialog.add("panel");		panel.text = "Platform:";		panel.borderStyle = "sunken";		panel.orientation = "column";		panel.alignment = "left";		panel.alignChildren = "left";		panel.alignChildren = ["fill","fill"];		panel.minimumSize.width = 170;						// add default		this.platforms.push({id: this.AIR, name: "AIR", options: this.AIR_SIZES}); 		this.platforms.push({id: this.ANDROID, name: "Android Icon", options: this.ANDROID_ICONS}); 		this.platforms.push({id: this.ANDROID, name: "Android Image", options: this.ANDROID_IMAGES}); 		this.platforms.push({id: this.IOS, name: "iOS", options: this.IOS_SIZES});    		//$.writeln("platforms" + this.platforms.toSource());				// add custom platforms to platforms		if (customPlatforms && customPlatforms.length!=0) {		 			for (var i = 0; i < customPlatforms.length; i++) {				this.platforms.push(customPlatforms[i]);			}		}				// add radio buttons for each platform		for (var j = 0; j < this.platforms.length; j++) {			var platform = this.platforms[j];			var radio = panel.add("radiobutton", undefined, platform.name);						if (customPlatforms && customPlatforms.length>0 && this.platforms.length-customPlatforms.length==j+1) {							// removed because radio buttons added after the 				// separator line are becoming part of a different radio group so removing for now								//var separator = panel.add("panel");				//separator.minimumSize.height = separator.maximumSize.height = 2;				//separator.preferredSize.width = 100;			}            			ExportToMultipleSizes.radioButtons.push(radio);						if (ExportToMultipleSizes.initialIndex==j) {				radio.value = true;			}		}								var buttonGroup 	= dialog.add("group", undefined, {alignment:"top"});		var okButton 		= buttonGroup.add("button", undefined, "OK", {name: "ok"});		var cancelButton 	= buttonGroup.add("button", undefined, "Cancel", {name: "cancel"});				okButton.onClick 	= this.okButtonHandler;				dialog.graphics.backgroundColor = dialog.graphics.newBrush(dialog.graphics.BrushType.THEME_COLOR, "appDialogBackground");		dialog.show();		},    okButtonHandler: function () {        ExportToMultipleSizes.hideWindow();                var radio = ExportToMultipleSizes.getSelectedRadioButton();        var platform = ExportToMultipleSizes.getPlatformByName(radio.text);                ExportToMultipleSizes.createResizedImages(platform.name);    },        getPlatformById: function (id) {        var numberOfPlatforms = this.platforms.length;        var platform;                for (var i=0;i<numberOfPlatforms;i++) {        	platform = this.platforms[i];        	        	if (platform.id==id) {        		return platform;        	}        }                return null;    },        getPlatformByName: function (name) {        var numberOfPlatforms = this.platforms.length;        var platform;                for (var i=0;i<numberOfPlatforms;i++) {        	platform = this.platforms[i];        	        	if (platform.name==name) {        		return platform;        	}        }                return null;    },        getRadioButtonByName: function (name) {        var radios = ExportToMultipleSizes.radioButtons;        var numberOfRadios = radios.length;        var radio;                for (var i=0;i<numberOfRadios;i++) {        	radio = radios[i];        	        	if (radio.text==name) {        		return radio;        	}        }                return null;    },        getSelectedRadioButton: function () {        var radios = ExportToMultipleSizes.radioButtons;        var numberOfRadios = radios.length;        var radio;                for (var i=0;i<numberOfRadios;i++) {        	radio = radios[i];        	        	if (radio.value==true) {        		return radio;        	}        }                return null;    },        alertExportWindow: function (title, input, message) {		if (input instanceof Array) {			input = input.join("\r");		}				var dialog = new Window("dialog", title);		dialog.orientation = "column";		dialog.add("statictext", undefined, message);		var textarea = dialog.add("edittext", undefined, input, {multiline:true, scrolling:true});				// the list should not be bigger than the maximum possible height of the window		textarea.maximumSize.height = dialog.maximumSize.height - dialog.maximumSize.height/2.5;		textarea.minimumSize.width = dialog.maximumSize.width - dialog.maximumSize.width/6;		dialog.layout.layout();		textarea.active = true;		dialog.add("button", undefined, "Close", {name:"ok"});		dialog.show();	},		alertMessage: function (title, message, beep) {		if (message instanceof Array) {			message = message.join("\r");		}				var dialog = new Window("dialog", title);		dialog.orientation = "column";		var text = dialog.add("statictext", undefined, message);		text.multiline = true;				dialog.layout.layout();		dialog.add("button", undefined, "Close", {name:"ok"});		dialog.show();				if (beep) {			app.beep();		}	},	    hideWindow: function () {        if (ExportToMultipleSizes.dialog) {            ExportToMultipleSizes.dialog.close(false);        }    }};ExportToMultipleSizes.run();